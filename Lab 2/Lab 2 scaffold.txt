// points_scaffold_js.txt

// Declare point B, to get point A add int y. To get point C, add int x to B. To get point D add both x and y to B.
// This will be the general arithmatic for making a triangle shape

window.onload = function init(){

	// This function initializes the visual aspect of the canvas such as the colors and shaders

	// initWebGL will not function properly without the utils.js included in the HTML
	// if the utils.js file is not properly included, then the result will be a blank screenn in the browser

	// it establishes the canvas viewport, then loads the shaders, and then finally gets the location of the shader variable
	// The function is also responsible for compiling and linking the shaders and creating a valid program executable. We are using a uniform variable
}

function render() {

	// The render function takes the points at the specified location and draws them on the canvas
	// It uses an if statement to place the points as long as the number of max points has not been reached
	// since the function never will reach max points, it will continuously place points on the canvas in a triangle formation
	// on random pointsa in the canvas
	
	// gl.triangle will be called in gl.drawArrays using a specific number of vertices. Since a triangle is being drawn we need a minimum
	// of 3 vertices. However, to be able to draw a square with triangles there needs to be 6 vertices as a parameter instead of 'counter'
}

function triangle(point){

	// The function takes in an assigned point and uses it to create a triangle
	// It will take the initial point and uses it to create three other points
	// that will make the two triangles for the square

}